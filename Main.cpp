#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <random>
#include <ctime>
#include <unordered_set>

const int MAX_WRONG = 8;  // maximum number of incorrect guesses allowed

// possible words to guess for each difficulty level
const std::vector<std::vector<std::string>> WORDS_BY_DIFFICULTY = {
    {"CAKE", "PIE", "COOKIES", "BROWNIES", "CUPCAKE"},
    {"TELEVISION", "COMPUTER", "PHONE", "CAMERA", "SPEAKER"},
    {"ELECTRICITY", "COMPLICATED", "MATHEMATICS", "PHILOSOPHY", "EXTRATERRESTRIAL"}
};

// function to choose a random word from the list for a given difficulty level
std::string chooseWord(int difficulty) {
    // create a static random engine initialized with the current time (only once)
    // this ensures that the random numbers generated by the engine are different each time the program is run.
    static std::default_random_engine engine(static_cast<unsigned int>(std::time(nullptr)));

    // create a static uniform distribution of indices for the chosen difficulty level
    // this ensures that a random word is selected from the appropriate vector.
    static std::uniform_int_distribution<size_t> dist(0, WORDS_BY_DIFFICULTY[difficulty].size() - 1);

    // use the distribution and engine to select a random word from the appropriate vector
    // the selected word is then returned by the function.
    return WORDS_BY_DIFFICULTY[difficulty][dist(engine)];
}


int main() {
    int difficulty = 0; // initialize the difficulty variable to 0

    // print a welcome message to the console
    std::cout << "Welcome to Hangman!\n";

    // prompt the user to select a difficulty level
    std::cout << "Select difficulty level (1-Easy, 2-Medium, 3-Hard): ";

    // read the user's input from the console and store it in the difficulty variable
    std::cin >> difficulty;


    while (difficulty < 1 || difficulty > 3) {
        std::cout << "Invalid input. Select difficulty level (1-Easy, 2-Medium, 3-Hard): ";
        std::cin >> difficulty;
    }

    std::string word = chooseWord(difficulty - 1);  // word to guess
    int wrong = 0;  // number of incorrect guesses
    int welp = 0;

    std::string soFar(word.size(), '-');  // word guessed so far
    std::unordered_set<char> used;  // letters already guessed

    std::cout << "Good luck!\n";
    system("cls");

    // main loop
    while ((wrong < MAX_WRONG) && welp != word.size()) {
        std::cout << "\nYou have " << (MAX_WRONG - wrong) << " incorrect guesses left.\n";
        std::cout << "\nYou've used the following letters:\n";
        for (auto c : used) {
            std::cout << c << " ";
        }
        std::cout << std::endl << "\nSo far, the word is:\n" << soFar << std::endl;

        char guess;
        std::cout << "\n\nEnter your guess: ";
        std::cin >> guess;
        guess = std::toupper(guess);  // make the guess uppercase

        system("cls");
        while (used.count(guess) > 0) {   
            std::cout << "\nYou've already guessed " << guess << std::endl;
            std::cout << "Enter your guess: ";
            std::cin >> guess;
            guess = std::toupper(guess);
        }

        used.insert(guess);

        if (word.find(guess) != std::string::npos) {
            std::cout << "That's right! " << guess << " is in the word.\n";
            std::transform(word.begin(), word.end(), soFar.begin(), 
                [guess](char c) { 
                    return (c == guess) ? c : '-'; 
                });

            ++welp;

            if (welp == word.size()) {
                std::cout << "\nYou guessed it! The word was " + word;
                return 0;
            }
        }
        else {
            std::cout << "Sorry, " << guess << " isn't in the word.\n";
            ++wrong;
        }
    }

    // game over
    if (wrong == MAX_WRONG) {
        std::cout << "\nYou've been hanged!";
    }
    else {
        std::cout << "\nYou guessed it!";
    }

    std::cout << "\nThe word was " << word << std::endl;

    return 0;
}
